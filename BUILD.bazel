package(default_visibility = ["//visibility:public"])

licenses(["notice"])

load(
    "@build_bazel_rules_apple//apple:macos.bzl",
    "macos_application",
)
load(
    "@build_bazel_rules_apple//apple:resources.bzl",
    "apple_resource_group",
    "apple_resource_bundle",
)
load(
    "@build_bazel_rules_swift//swift:swift.bzl",
    "swift_library",
)
load(
    "@build_bazel_rules_apple//apple:versioning.bzl",
    "apple_bundle_version",
)
load(
    "@com_github_bazelbuild_buildtools//buildifier:def.bzl",
    "buildifier",
)
load(
    "//third_party:repositories.bzl",
    "namespaced_name",
)
load(
    "//BazelExtensions:xchammerconfig.bzl",
    "execution_action",
    "gen_xchammer_config",
    "project_config",
    "scheme_action_config",
    "target_config",
    "xchammer_config",
)

apple_resource_group(
    name = "XCHammerAssets",
    structured_resources = glob([
        "XCHammerAssets/**",
    ]),
)


# Build system support. Currently, we use the example xcbuildkit
# to simply show the progress bar.
# Stick this into a bundle to group files together
apple_resource_bundle(
    name = "XCBuildKit",
    resources = [
        "@xcbuildkit//:BazelBuildServiceInstaller",
        "@xcbuildkit//:BuildInfo",
        # We use this to check if it's installed into each Xcode
        "@bazel_tools//tools/osx:xcode-locator-genrule"
    ]
)

load(
    "//BazelExtensions:xcode_configuration_provider.bzl",
    "declare_target_config",
)

# This is an example of declaring a target config.
declare_target_config(name="XCHammerSourcesXcodeConfig", config=target_config())

swift_library(
    name = "XCHammerSources",
    srcs = glob(["Sources/**/*.swift"]),
    data = [
        ":XCHammerAssets",
        "//BazelExtensions:BazelExtensions",
    ] + [
        ":XCBuildKit",
        
    ],
    deps = ["@" + namespaced_name(x) for x in [
        "AEXML//:AEXML",
        "Commandant//:Commandant",
        "Commander//:Commander",
        "JSONUtilities//:JSONUtilities",
        "PathKit//:PathKit",
        "Rainbow//:Rainbow",
        "Result//:Result",
        "ShellOut//:ShellOut",
        "Tulsi//src/TulsiGenerator:tulsi_generator_lib",
        "XcodeGen//:XcodeGenKit",
        "XcodeGen//:ProjectSpec",
        "XcodeProj//:XcodeProj",
        "Yams//:Yams",
    ]] + [":XCHammerSourcesXcodeConfig" ],
    copts = [
        "-swift-version",
        "4.2"
    ],
)

apple_bundle_version(
    name = "XCHammerVersion",
    build_version = "1.0",
)

macos_application(
    name = "xchammer",
    bundle_id = "com.pinterest.xchammer",
    infoplists = ["Info.plist"],
    minimum_os_version = "10.14",
    version = ":XCHammerVersion",
    deps = [":XCHammerSources"],
)

buildifier(
    name = "buildifier",
)

script_base = "$SRCROOT/tools/instrumentation_helpers"

scheme_config = {
    "Build": scheme_action_config(
        post_actions = [
            execution_action(
                name = "Report build end",
                script = "python " + script_base + "/statsd_post_build_action.py",
            ),
        ],
        pre_actions = [
            execution_action(
                name = "Track build start",
                script = script_base + "/statsd_pre_build_action.sh",
            ),
        ],
    ),
}

xchammer_config = xchammer_config(
    projects = {
        "xchammer": project_config(paths = ["**"]),
    },
    target_config = {
        "//:xchammer": target_config(
            # Metrics are disabled by default
            # scheme_config=scheme_config
        ),
        "//tools/XCConfigExporter:xcconfig-exporter": target_config(),
    },
    targets = ["//:xchammer", "//tools/XCConfigExporter:xcconfig-exporter"],
)

gen_xchammer_config(
    name = "xchammer_config",
    config = xchammer_config,
)

# Experimental xcode_project rule
load(
    "//BazelExtensions:xcodeproject.bzl",
    "xcode_project"
)

xcode_project(
    name="workspace_v2",
    bazel="tools/bazelwrapper",
    targets=["//:xchammer",  "//tools/XCConfigExporter:xcconfig-exporter"],
    project_config=project_config(
        paths = ["**"],
        generate_xcode_schemes=False,
        xcconfig_overrides = {
            "Release": "tools/BazelToolchain.xcconfig",
            "Debug": "tools/BazelToolchain.xcconfig",
            "Profile": "tools/BazelToolchain.xcconfig",
        }
    )
)

# Development / Distribution
genrule(
    name = "xchammer_unzip",
    srcs = [ ":xchammer" ],
    cmd = "unzip -q $(SRCS) -d $(OUTS)",
    outs = [ "xchammer_unzip" ]
)

# This produces the same interface as the XCHammer repository, so a person
# could use a distribution artifact or a source build without changing thier
# build files
# Building XCHammer ( or any decently complex tool using external deps ) from
# source isn't suggested as it will involve making sure your iOS env has the
# same bazel, Xcode version installed, and all transitive deps in the
# WORKSPACE. Outside of being difficulto update/manage, it's also very
# cumbersome in Bazel
# https://github.com/bazelbuild/bazel/issues/1550
# The current API is
# :xchammer ( excutable binary )
# BazelExtensions/*.bzl ( related bazel API )
# Usage:
# http_archive(
#   name = "xchammer",
#   urls = ["file:////path/to/xchammer/bazel-bin/xchammer_dist.zip"]
# )
gen_workspace_cmd = """
    mkdir BazelExtensions
    cd BazelExtensions
    touch BUILD
    RESOURCES=../xchammer.app/Contents/Resources
    ln -s $$RESOURCES/xcode_configuration_provider.bzl xcode_configuration_provider.bzl
    ln -s $$RESOURCES/xchammerconfig.bzl xchammerconfig.bzl
    ln -s $$RESOURCES/xcodeproject.bzl xcodeproject.bzl
    ln -s $$RESOURCES/tulsi tulsi
    sed  's,@xchammer_tulsi_aspects//,,g' $$RESOURCES/tulsi.bzl > tulsi.bzl
    cd ..
    touch WORKSPACE
    touch BUILD
    echo 'sh_binary(name="xchammer", srcs=["xchammer.app/Contents/MacOS/xchammer"], visibility=["//visibility:public"])' > BUILD
"""
genrule(
    name = "xchammer_dist",
    srcs = [ ":xchammer_unzip" ],
    cmd = """
    mkdir zipdir/
    cp -r $(SRCS)/xchammer.app zipdir/xchammer.app
    cd zipdir
    {gen_workspace_cmd}
    zip -q ../$(OUTS) -r .
    """.format(gen_workspace_cmd=gen_workspace_cmd),
    outs = [ "xchammer_dist_repo.zip" ]
)

# Builds an xchammer WORKSPACE use for local development. By creating a symlink
# to the build artifact to ensure the upstream repository is using the latest
# artifacts.
# 
# If we were to just use `xchammer_dist` Bazel will not check a `.zip` of an
# http_archive, so this symlinks the files instead.
#
# TODO: migrate to tree artifacts and load the `.app` directly
#  ( --define "apple.experimental.tree_artifact_outputs=True" )
#
# local_repository(
#   name = "xchammer",
#   path =  "/path/to/xchammer/bazel-bin/xchammer_dev_repo/"
# )
# --override_repository=xchammer=/path/to/xchammer/bazel-bin/xchammer_dev_repo/
genrule(
    name = "xchammer_dev",
    srcs = [ ":xchammer" ],
    cmd = """
    set -x
    mkdir $(OUTS)
    ln -s $$(dirname $$PWD/$(SRCS))/xchammer_archive-root/xchammer.app $(OUTS)/xchammer.app
    cd $(OUTS)
    {gen_workspace_cmd}
    """.format(gen_workspace_cmd=gen_workspace_cmd),
    outs = [ "xchammer_dev_repo" ],
)
