package(default_visibility = ["//visibility:public"])

licenses(["notice"])

load(
    "@build_bazel_rules_apple//apple:macos.bzl",
    "macos_application",
)
load(
    "@build_bazel_rules_apple//apple:resources.bzl",
    "apple_resource_group",
)
load(
    "@build_bazel_rules_swift//swift:swift.bzl",
    "swift_library",
)
load(
    "@build_bazel_rules_apple//apple:versioning.bzl",
    "apple_bundle_version",
)
load(
    "@com_github_bazelbuild_buildtools//buildifier:def.bzl",
    "buildifier",
)
load(
    "//third_party:repositories.bzl",
    "namespaced_name",
)
load(
    "//BazelExtensions:xchammerconfig.bzl",
    "execution_action",
    "gen_xchammer_config",
    "project_config",
    "scheme_action_config",
    "target_config",
    "xchammer_config",
)

apple_resource_group(
    name = "XCHammerAssets",
    structured_resources = glob([
        "XCHammerAssets/**",
    ]),
)

swift_library(
    name = "XCHammerSources",
    srcs = glob(["Sources/**/*.swift"]),
    data = [
        ":XCHammerAssets",
        "//BazelExtensions:BazelExtensions",
    ],
    deps = ["@" + namespaced_name(x) for x in [
        "AEXML//:AEXML",
        "Commandant//:Commandant",
        "Commander//:Commander",
        "JSONUtilities//:JSONUtilities",
        "PathKit//:PathKit",
        "Rainbow//:Rainbow",
        "Result//:Result",
        "ShellOut//:ShellOut",
        "Tulsi//src/TulsiGenerator:tulsi_generator_lib",
        "XcodeGen//:XcodeGenKit",
        "XcodeGen//:ProjectSpec",
        "XcodeProj//:XcodeProj",
        "Yams//:Yams",
    ]],
    copts = [
        "-swift-version",
        "4.2"
    ],
)

apple_bundle_version(
    name = "XCHammerVersion",
    build_version = "1.0",
)

macos_application(
    name = "xchammer",
    bundle_id = "com.pinterest.xchammer",
    infoplists = ["Info.plist"],
    minimum_os_version = "10.14",
    version = ":XCHammerVersion",
    deps = [":XCHammerSources"],
)

buildifier(
    name = "buildifier",
)

script_base = "$SRCROOT/tools/instrumentation_helpers"

scheme_config = {
    "Build": scheme_action_config(
        post_actions = [
            execution_action(
                name = "Report build end",
                script = "python " + script_base + "/statsd_post_build_action.py",
            ),
        ],
        pre_actions = [
            execution_action(
                name = "Track build start",
                script = script_base + "/statsd_pre_build_action.sh",
            ),
        ],
    ),
}

xchammer_config = xchammer_config(
    projects = {
        "xchammer": project_config(paths = ["**"]),
    },
    target_config = {
        "//:xchammer": target_config(
            # Metrics are disabled by default
            # scheme_config=scheme_config
        ),
        "//tools/XCConfigExporter:xcconfig-exporter": target_config(),
    },
    targets = ["//:xchammer", "//tools/XCConfigExporter:xcconfig-exporter"],
)

gen_xchammer_config(
    name = "xchammer_config",
    config = xchammer_config,
)

# Experimental xcode_project rule
load(
    "//BazelExtensions:xcodeproject.bzl",
    "xcode_project",
)

xcode_project(
    name="workspace_v2",
    targets=["//:xchammer", "//tools/XCConfigExporter:xcconfig-exporter"],
    bazel="tools/bazelwrapper",
    xchammer="xchammer.app"
)



