//
//  main.swift
//  Pinterest
//
//  Created by Jerry Marino on 12/1/17.
//  Copyright Â© 2017 Jerry Marino. All rights reserved.
//

import Foundation

let BzlHeader = """
# This file is generated by a program maintained by the Pinterest iOS Bazel
# contributors. DO NOT CHANGE THE CONTENTS OF IT!
"""

// This program reads in an Xcode config, converts it to diagnostic flags,
// and writes the output to a file of the form
// DIAG_FLAGS = []

// Program arguments:
// TODO: add CLI flags
let importCfg = "FIXMEDiags.xcconfig"
let outputFile = "FIXMEDiags.bzl"
//let importCfg = "FIXMEDiags.xcconfig"
//let outputFile = "FIXMEDiags.bzl"

func main() {
    // TODO: detect PWD
    let sourceRoot = "FIXME"
    let readerCfg = "FIXMEConfig.xcconfig"
    let sourceRoot = "Fixtures/iOSApp/"
    let readerCfg = "TmpConfigDir/Config


    let _ = try? FileManager.default.removeItem(atPath: readerCfg)
    guard let _ = try? FileManager.default.copyItem(atPath: importCfg,
                                                      toPath: readerCfg) else {
            fatalError("Can't import config")
    }

    let target = "iOSApp"
    let xcbuilder = XCCompilationDatabaseBuilder(schemeName: target,
                                                 xcodeTargets: [target],
                                                 sourceRoot: sourceRoot,
                                                 projectName: "iOSApp.xcodeproj",
                                                 workspaceName: nil,
                                                 skipBuild: false)
    let db = xcbuilder.getXCCompDB() as! CompilationDatabase
    let firstE = db.entries.first { $0.file.hasSuffix("main.m") }
    guard let mainEntry = firstE else {
        fatalError("Missing entry for main.m")
    }
    let filterFlags = Set<String>() // unused for now.
    let diagFlags = (mainEntry.command as! [String]).filter { $0.hasPrefix("-W") && filterFlags.contains($0) == false }
    var addedFlags = Set<String>()
    let bzl = BzlHeader + "\nDIAG_FLAGS = [\n" + diagFlags.flatMap {
        arg -> String? in
        addedFlags.insert(arg);
        return "    \"" + arg + "\","
        }.joined(separator: "\n") + "\n]"
    print(bzl)
    guard let _ = try? bzl.write(toFile: outputFile, atomically: true, encoding: .utf8) else {
        fatalError("Can't write " + outputFile)
    }
}

main()
