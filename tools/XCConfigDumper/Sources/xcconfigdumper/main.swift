//
//  File.swift
//
//
//  Created by Vlad Solomenchuk on 8/9/19.
//

import Foundation
import SPMUtility
import SwiftShell
import XCConfigDumperCore

struct Config {
    let inputLog: String?
    let outputBazelConfig: String?
}

func getConfig(arguments: [String]) throws -> Config {
    let parser = ArgumentParser(usage: "<options>\n\nEXAMPLE: xcodebuild -configuration Debug -project Test.xcodeproj | swift run dumper --output-bazel-config Diag.bzl", overview: "Xcode diagnostic parameters dumper")
    let inputLog: OptionArgument<String> = parser.add(option: "--xcode-log", kind: String.self, usage: "An xcode build log. Reads from stdin if not provided")
    let outputBazelConfig: OptionArgument<String> = parser.add(option: "--output-bazel-config", kind: String.self, usage: "A bazel output config. Prints to stdin if not provided")

    let parsedArguments = try parser.parse(arguments)

    return Config(inputLog: parsedArguments.get(inputLog), outputBazelConfig: parsedArguments.get(outputBazelConfig))
}

do {
    let arguments = Array(ProcessInfo.processInfo.arguments.dropFirst())
    let config = try getConfig(arguments: arguments)

    let logContent: String

    if let inputLog = config.inputLog {
        let url = URL(fileURLWithPath: inputLog)
        logContent = try String(contentsOf: url)
    } else {
        var allLines = ""

        for line in main.stdin.lines() {
            print(line)
            allLines.append("\(line)\n")
        }

        logContent = allLines
    }

    let parser = XcodeBuildLog(log: logContent)

    let formatter: OutputFormatter
    let path: String?
    if let outputXCConfig = config.outputBazelConfig {
        formatter = BazelConfigOutputFormatter(comment: "# This file is automatically generated file\n#DO NOT CHANGE THE CONTENTS OF IT!")
        path = outputXCConfig
    } else {
        formatter = PlainOutputFormatter()
        path = nil
    }

    let result = formatter.stringify(fields: parser.getAllDiagnosticParameters())
    if let path = path {
        try result.write(toFile: path, atomically: true, encoding: .utf8)
    } else {
        print(result)
    }

} catch let error as ArgumentParserError {
    print(error.description)
} catch {
    print(error.localizedDescription)
}
